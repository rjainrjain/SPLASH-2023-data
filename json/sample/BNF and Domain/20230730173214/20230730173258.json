{"date":"2023-07-30T21:32:58.595Z","prompt":{"systemInst":"You are a code generator that is generating a new program in the Substance programming language, whose BNF grammar is given below. To write comments, begin with `--`. Return only the Substance program; do not explain your reasoning whatsoever.\n\n","penroseContext":"We have been working on a platform called Penrose for authoring mathematical diagrams. The system involves a family of 3 domain specific languages: Substance (for specifying the mathematical objects and the relationships between those objects, Style (for mapping the mathematical objects to shapes and mathematical relationships to layout constraints and objectives), and Domain (for specifying the types of mathematical objects and relationships; this is a meta-language or schema language). Those three programs are used to synthesize a layout problem which we then solve to create a corresponding diagram.\n\n","domain":"-- Atoms\n\ntype Atom\n\ntype Hydrogen <: Atom -- This type describes a hydrogen atom. Example usage which holds for all following elements: \n-- Hydrogen h1\n-- Hydrogen h2, h3\ntype Helium <: Atom\ntype Lithium <: Atom\ntype Beryllium <: Atom\ntype Boron <: Atom\ntype Carbon <: Atom\ntype Nitrogen <: Atom\ntype Oxygen <: Atom\ntype Fluorine <: Atom\ntype Neon <: Atom\ntype Sodium <: Atom\ntype Magnesium <: Atom\ntype Aluminium <: Atom\ntype Silicon <: Atom\ntype Phosphorus <: Atom\ntype Sulfur <: Atom\ntype Chlorine <: Atom\ntype Argon <: Atom\ntype Potassium <: Atom\ntype Calcium <: Atom\ntype Scandium <: Atom\ntype Titanium <: Atom\ntype Vanadium <: Atom\ntype Chromium <: Atom\ntype Manganese <: Atom\ntype Iron <: Atom\ntype Cobalt <: Atom\ntype Nickel <: Atom\ntype Copper <: Atom\ntype Zinc <: Atom\ntype Gallium <: Atom\ntype Germanium <: Atom\ntype Arsenic <: Atom\ntype Selenium <: Atom\ntype Bromine <: Atom\ntype Krypton <: Atom\ntype Rubidium <: Atom\ntype Strontium <: Atom\ntype Yttrium <: Atom\ntype Zirconium <: Atom\ntype Niobium <: Atom\ntype Molybdenum <: Atom\ntype Technetium <: Atom\ntype Ruthenium <: Atom\ntype Rhodium <: Atom\ntype Palladium <: Atom\ntype Silver <: Atom\ntype Cadmium <: Atom\ntype Indium <: Atom\ntype Tin <: Atom\ntype Antimony <: Atom\ntype Tellurium <: Atom\ntype Iodine <: Atom\ntype Xenon <: Atom\ntype Cesium <: Atom\ntype Barium <: Atom\ntype Lanthanum <: Atom\ntype Cerium <: Atom\ntype Praseodymium <: Atom\ntype Neodymium <: Atom\ntype Promethium <: Atom\ntype Samarium <: Atom\ntype Europium <: Atom\ntype Gadolinium <: Atom\ntype Terbium <: Atom\ntype Dysprosium <: Atom\ntype Holmium <: Atom\ntype Erbium <: Atom\ntype Thulium <: Atom\ntype Ytterbium <: Atom\ntype Lutetium <: Atom\ntype Hafnium <: Atom\ntype Tantalum <: Atom\ntype Tungsten <: Atom\ntype Rhenium <: Atom\ntype Osmium <: Atom\ntype Iridium <: Atom\ntype Platinum <: Atom\ntype Gold <: Atom\ntype Mercury <: Atom\ntype Thallium <: Atom\ntype Lead <: Atom\ntype Bismuth <: Atom\ntype Polonium <: Atom\ntype Astatine <: Atom\ntype Radon <: Atom\ntype Francium <: Atom\ntype Radium <: Atom\ntype Actinium <: Atom\ntype Thorium <: Atom\ntype Protactinium <: Atom\ntype Uranium <: Atom\ntype Neptunium <: Atom\ntype Plutonium <: Atom\ntype Americium <: Atom\ntype Curium <: Atom\ntype Berkelium <: Atom\ntype Californium <: Atom\ntype Einsteinium <: Atom\ntype Fermium <: Atom\ntype Mendelevium <: Atom\ntype Nobelium <: Atom\ntype Lawrencium <: Atom\ntype Rutherfordium <: Atom\ntype Dubnium <: Atom\ntype Seaborgium <: Atom\ntype Bohrium <: Atom\ntype Hassium <: Atom\ntype Meitnerium <: Atom\ntype Darmstadtium <: Atom\ntype Roentgenium <: Atom\ntype Copernicium <: Atom\n\n-- Bonds\n\ntype Bond -- This type describes a bond. See construction of a bond below.\n\nconstructor MakeSingleBond(Atom a, Atom b) -> Bond -- This function creates a single bond between two atoms. Example usage: \n-- Hydrogen h1, h2\n-- Bond b1\n-- b1 := MakeSingleBond(h1, h2)\nconstructor MakeDoubleBond(Atom a, Atom b) -> Bond -- This function creates a double bond between two atoms. Example usage: \n-- Oxygen o1, o2\n-- Bond b1\n-- b1 := MakeDoubleBond(o1, o2)\n-- FourDots(o1)\n-- FourDots(o2)\nconstructor MakeTripleBond(Atom a, Atom b) -> Bond -- This function creates a triple bond between two atoms. Example usage: \n-- Nitrogen n1, n2\n-- Bond b1\n-- b1 := MakeTripleBond(n1, n2)\n-- TwoDots(n1)\n-- TwoDots(n2)\n\n-- Electrons \n\n-- these correspond to dots in a Lewis structure\npredicate ZeroDots(Atom) -- This predicate displays no dots on an atom. Example usage: \n-- Hydrogen h1, h2\n-- Bond b1 := MakeSingleBond(h1, h2)\n-- ZeroDots(h1)\n-- ZeroDots(h2)\npredicate TwoDots(Atom) -- This predicate displays two dots on an atom. Example usage: \n-- Nitrogen n1, n2\n-- Bond b1 := MakeTripleBond(n1, n2)\n-- TwoDots(n1)\n-- TwoDots(n2)\npredicate FourDots(Atom) -- This predicate displays four dots on an atom. Example usage: \n-- Oxygen o1, o2\n-- Bond b1 := MakeDoubleBond(o1, o2)\n-- FourDots(o1)\n-- FourDots(o2)\npredicate SixDots(Atom) -- This predicate displays six dots on an atom. Example usage:\n-- Fluorine f1, f2\n-- Bond b1 := MakeSingleBond(f1, f2)\n-- SixDots(f1)\n-- SixDots(f2)\n\n-- layout\n-- predicate Collinear(Atom, Atom, Atom)\n-- predicate VerticalAlign(Atom, Atom)\n-- predicate HorizontalAlign(Atom, Atom)\n","descriptionPrelude":"Given the context above, can you generate a new Substance program which describes the following:","description":"the Lewis structure of carbon tetrachloride?","finalInst":"To write comments, begin with `--`. Return only the Substance program; do not explain your reasoning whatsoever.","prompt":"You are a code generator that is generating a new program in the Substance programming language, whose BNF grammar is given below. To write comments, begin with `--`. Return only the Substance program; do not explain your reasoning whatsoever.\n\nWe have been working on a platform called Penrose for authoring mathematical diagrams. The system involves a family of 3 domain specific languages: Substance (for specifying the mathematical objects and the relationships between those objects, Style (for mapping the mathematical objects to shapes and mathematical relationships to layout constraints and objectives), and Domain (for specifying the types of mathematical objects and relationships; this is a meta-language or schema language). Those three programs are used to synthesize a layout problem which we then solve to create a corresponding diagram.\n\nHere is a BNF grammar that the Substance program you generate should conform to:\n\n```\nid ::= letter (letter | digit)*\nsubstance ::= stmt*\nstmt      ::= decl | predicate | function\ndecl      ::= tname id\npredicate ::= pname \"(\" id \")\"\nfunction  ::= tname id \":=\" fname \"(\" id \",\" id \")\"\ntname     ::= \"Hydrogen\" // This type describes a hydrogen atom. Example usage which holds for all following elements: \n\t\t'Hydrogen h1\n\t\tHydrogen h2, h3'\n            | \"Helium\" | \"Lithium\" | \"Beryllium\" | \"Boron\" | \"Carbon\" | \"Nitrogen\" | \"Oxygen\" | \"Fluorine\" | \"Neon\" | \"Sodium\" | \"Magnesium\" | \"Aluminium\" | \"Silicon\" | \"Phosphorus\" | \"Sulfur\" | \"Chlorine\" | \"Argon\" | \"Potassium\" | \"Calcium\" | \"Scandium\" | \"Titanium\" | \"Vanadium\" | \"Chromium\" | \"Manganese\" | \"Iron\" | \"Cobalt\" | \"Nickel\" | \"Copper\" | \"Zinc\" | \"Gallium\" | \"Germanium\" | \"Arsenic\" | \"Selenium\" | \"Bromine\" | \"Krypton\" | \"Rubidium\" | \"Strontium\" | \"Yttrium\" | \"Zirconium\" | \"Niobium\" | \"Molybdenum\" | \"Technetium\" | \"Ruthenium\" | \"Rhodium\" | \"Palladium\" | \"Silver\" | \"Cadmium\" | \"Indium\" | \"Tin\" | \"Antimony\" | \"Tellurium\" | \"Iodine\" | \"Xenon\" | \"Cesium\" | \"Barium\" | \"Lanthanum\" | \"Cerium\" | \"Praseodymium\" | \"Neodymium\" | \"Promethium\" | \"Samarium\" | \"Europium\" | \"Gadolinium\" | \"Terbium\" | \"Dysprosium\" | \"Holmium\" | \"Erbium\" | \"Thulium\" | \"Ytterbium\" | \"Lutetium\" | \"Hafnium\" | \"Tantalum\" | \"Tungsten\" | \"Rhenium\" | \"Osmium\" | \"Iridium\" | \"Platinum\" | \"Gold\" | \"Mercury\" | \"Thallium\" | \"Lead\" | \"Bismuth\" | \"Polonium\" | \"Astatine\" | \"Radon\" | \"Francium\" | \"Radium\" | \"Actinium\" | \"Thorium\" | \"Protactinium\" | \"Uranium\" | \"Neptunium\" | \"Plutonium\" | \"Americium\" | \"Curium\" | \"Berkelium\" | \"Californium\" | \"Einsteinium\" | \"Fermium\" | \"Mendelevium\" | \"Nobelium\" | \"Lawrencium\" | \"Rutherfordium\" | \"Dubnium\" | \"Seaborgium\" | \"Bohrium\" | \"Hassium\" | \"Meitnerium\" | \"Darmstadtium\" | \"Roentgenium\" | \"Copernicium\"\n            | \"Bond\" // This type describes a bond. See construction of a bond below.\nfname     ::= \"MakeSingleBond\" // This function creates a single bond between two atoms. Example usage: \n\t\t'Hydrogen h1, h2\n\t\tBond b1\n\t\tb1 := MakeSingleBond(h1, h2)'\n            | \"MakeDoubleBond\" // This function creates a double bond between two atoms. Example usage: \n\t\t'Oxygen o1, o2\n\t\tBond b1\n\t\tb1 := MakeDoubleBond(o1, o2)\n\t\tFourDots(o1)\n\t\tFourDots(o2)'\n            | \"MakeTripleBond\" // This function creates a triple bond between two atoms. Example usage: \n\t\t'Nitrogen n1, n2\n\t\tBond b1\n\t\tb1 := MakeTripleBond(n1, n2)\n\t\tTwoDots(n1)\n\t\tTwoDots(n2)'\npname     ::= \"ZeroDots\" // This predicate displays no dots on an atom. Example usage: \n\t\t'Hydrogen h1, h2\n\t\tBond b1 := MakeSingleBond(h1, h2)\n\t\tZeroDots(h1)\n\t\tZeroDots(h2)'\n            | \"TwoDots\" // This predicate displays two dots on an atom. Example usage: \n\t\t'Nitrogen n1, n2\n\t\tBond b1 := MakeTripleBond(n1, n2)\n\t\tTwoDots(n1)\n\t\tTwoDots(n2)'\n            | \"FourDots\" // This predicate displays four dots on an atom. Example usage: \n\t\t'Oxygen o1, o2\n\t\tBond b1 := MakeDoubleBond(o1, o2)\n\t\tFourDots(o1)\n\t\tFourDots(o2)'\n            | \"SixDots\" // This predicate displays six dots on an atom. Example usage: \n\t\t'Fluorine f1, f2\n\t\tBond b1 := MakeSingleBond(f1, f2)\n\t\tSixDots(f1)\n\t\tSixDots(f2)'\nletter    ::= \"A\" | \"B\" | ... | \"Z\" | \"a\" | \"b\" | ... | \"z\"\ndigit     ::= \"0\" | \"1\" | ... | \"9\"\n\n```\n\nHere is a sample Substance program named \"Lewis structures of nitrogen and sulfuric acid\":\n\n```\n -- Lewis structure of nitrogen molecule\nNitrogen n1, n2\n\nBond b1 := MakeTripleBond(n1, n2)\n\n-- Lewis structure of Sulfuric Acid\nHydrogen h3, h4\nSulfur s1\nOxygen o1, o2, o3, o4\n\nBond b2 := MakeSingleBond(h3, o1)\nBond b3 := MakeSingleBond(h4, o2)\nBond b4 := MakeSingleBond(o1, s1)\nBond b5 := MakeSingleBond(o2, s1)\nBond b6 := MakeDoubleBond(o3, s1)\nBond b7 := MakeDoubleBond(o4, s1)\n\nZeroDots(h3)\nZeroDots(h4)\nZeroDots(s1)\nFourDots(o1)\nFourDots(o2)\nFourDots(o3)\nFourDots(o4)\n\n```\n\nGiven the context above, can you generate a new Substance program which describes the following: the Lewis structure of carbon tetrachloride? \n\nTo write comments, begin with `--`. Return only the Substance program; do not explain your reasoning whatsoever.","style":"canvas {\n    width = 300\n    height = 300\n}\n\nconst {\n  scalar dotSize = 3\n  scalar atomSize = 30\n  scalar k = 1 -- spring stiffness\n  scalar L = 10 -- rest length\n  scalar symmetryWeight = 1\n  scalar symmetryDegree = 3\n  scalar bondAvoidWeight = 1\n}\n\n-- generated element list\n\n\nforall Hydrogen x {\n  x.symbol = \"H\"\n  x.id = 1\n}\n\nforall Helium x {\n  x.symbol = \"He\"\n  x.id = 2\n}\n\nforall Lithium x {\n  x.symbol = \"Li\"\n  x.id = 3\n}\n\nforall Beryllium x {\n  x.symbol = \"Be\"\n  x.id = 4\n}\n\nforall Boron x {\n  x.symbol = \"B\"\n  x.id = 5\n}\n\nforall Carbon x {\n  x.symbol = \"C\"\n  x.id = 6\n}\n\nforall Nitrogen x {\n  x.symbol = \"N\"\n  x.id = 7\n}\n\nforall Oxygen x {\n  x.symbol = \"O\"\n  x.id = 8\n}\n\nforall Fluorine x {\n  x.symbol = \"F\"\n  x.id = 9\n}\n\nforall Neon x {\n  x.symbol = \"Ne\"\n  x.id = 10\n}\n\nforall Sodium x {\n  x.symbol = \"Na\"\n  x.id = 11\n}\n\nforall Magnesium x {\n  x.symbol = \"Mg\"\n  x.id = 12\n}\n\nforall Aluminium x {\n  x.symbol = \"Al\"\n  x.id = 13\n}\n\nforall Silicon x {\n  x.symbol = \"Si\"\n  x.id = 14\n}\n\nforall Phosphorus x {\n  x.symbol = \"P\"\n  x.id = 15\n}\n\nforall Sulfur x {\n  x.symbol = \"S\"\n  x.id = 16\n}\n\nforall Chlorine x {\n  x.symbol = \"Cl\"\n  x.id = 17\n}\n\nforall Argon x {\n  x.symbol = \"Ar\"\n  x.id = 18\n}\n\nforall Potassium x {\n  x.symbol = \"K\"\n  x.id = 19\n}\n\nforall Calcium x {\n  x.symbol = \"Ca\"\n  x.id = 20\n}\n\nforall Scandium x {\n  x.symbol = \"Sc\"\n  x.id = 21\n}\n\nforall Titanium x {\n  x.symbol = \"Ti\"\n  x.id = 22\n}\n\nforall Vanadium x {\n  x.symbol = \"V\"\n  x.id = 23\n}\n\nforall Chromium x {\n  x.symbol = \"Cr\"\n  x.id = 24\n}\n\nforall Manganese x {\n  x.symbol = \"Mn\"\n  x.id = 25\n}\n\nforall Iron x {\n  x.symbol = \"Fe\"\n  x.id = 26\n}\n\nforall Cobalt x {\n  x.symbol = \"Co\"\n  x.id = 27\n}\n\nforall Nickel x {\n  x.symbol = \"Ni\"\n  x.id = 28\n}\n\nforall Copper x {\n  x.symbol = \"Cu\"\n  x.id = 29\n}\n\nforall Zinc x {\n  x.symbol = \"Zn\"\n  x.id = 30\n}\n\nforall Gallium x {\n  x.symbol = \"Ga\"\n  x.id = 31\n}\n\nforall Germanium x {\n  x.symbol = \"Ge\"\n  x.id = 32\n}\n\nforall Arsenic x {\n  x.symbol = \"As\"\n  x.id = 33\n}\n\nforall Selenium x {\n  x.symbol = \"Se\"\n  x.id = 34\n}\n\nforall Bromine x {\n  x.symbol = \"Br\"\n  x.id = 35\n}\n\nforall Krypton x {\n  x.symbol = \"Kr\"\n  x.id = 36\n}\n\nforall Rubidium x {\n  x.symbol = \"Rb\"\n  x.id = 37\n}\n\nforall Strontium x {\n  x.symbol = \"Sr\"\n  x.id = 38\n}\n\nforall Yttrium x {\n  x.symbol = \"Y\"\n  x.id = 39\n}\n\nforall Zirconium x {\n  x.symbol = \"Zr\"\n  x.id = 40\n}\n\nforall Niobium x {\n  x.symbol = \"Nb\"\n  x.id = 41\n}\n\nforall Molybdenum x {\n  x.symbol = \"Mo\"\n  x.id = 42\n}\n\nforall Technetium x {\n  x.symbol = \"Tc\"\n  x.id = 43\n}\n\nforall Ruthenium x {\n  x.symbol = \"Ru\"\n  x.id = 44\n}\n\nforall Rhodium x {\n  x.symbol = \"Rh\"\n  x.id = 45\n}\n\nforall Palladium x {\n  x.symbol = \"Pd\"\n  x.id = 46\n}\n\nforall Silver x {\n  x.symbol = \"Ag\"\n  x.id = 47\n}\n\nforall Cadmium x {\n  x.symbol = \"Cd\"\n  x.id = 48\n}\n\nforall Indium x {\n  x.symbol = \"In\"\n  x.id = 49\n}\n\nforall Tin x {\n  x.symbol = \"Sn\"\n  x.id = 50\n}\n\nforall Antimony x {\n  x.symbol = \"Sb\"\n  x.id = 51\n}\n\nforall Tellurium x {\n  x.symbol = \"Te\"\n  x.id = 52\n}\n\nforall Iodine x {\n  x.symbol = \"I\"\n  x.id = 53\n}\n\nforall Xenon x {\n  x.symbol = \"Xe\"\n  x.id = 54\n}\n\nforall Cesium x {\n  x.symbol = \"Cs\"\n  x.id = 55\n}\n\nforall Barium x {\n  x.symbol = \"Ba\"\n  x.id = 56\n}\n\nforall Lanthanum x {\n  x.symbol = \"La\"\n  x.id = 57\n}\n\nforall Cerium x {\n  x.symbol = \"Ce\"\n  x.id = 58\n}\n\nforall Praseodymium x {\n  x.symbol = \"Pr\"\n  x.id = 59\n}\n\nforall Neodymium x {\n  x.symbol = \"Nd\"\n  x.id = 60\n}\n\nforall Promethium x {\n  x.symbol = \"Pm\"\n  x.id = 61\n}\n\nforall Samarium x {\n  x.symbol = \"Sm\"\n  x.id = 62\n}\n\nforall Europium x {\n  x.symbol = \"Eu\"\n  x.id = 63\n}\n\nforall Gadolinium x {\n  x.symbol = \"Gd\"\n  x.id = 64\n}\n\nforall Terbium x {\n  x.symbol = \"Tb\"\n  x.id = 65\n}\n\nforall Dysprosium x {\n  x.symbol = \"Dy\"\n  x.id = 66\n}\n\nforall Holmium x {\n  x.symbol = \"Ho\"\n  x.id = 67\n}\n\nforall Erbium x {\n  x.symbol = \"Er\"\n  x.id = 68\n}\n\nforall Thulium x {\n  x.symbol = \"Tm\"\n  x.id = 69\n}\n\nforall Ytterbium x {\n  x.symbol = \"Yb\"\n  x.id = 70\n}\n\nforall Lutetium x {\n  x.symbol = \"Lu\"\n  x.id = 71\n}\n\nforall Hafnium x {\n  x.symbol = \"Hf\"\n  x.id = 72\n}\n\nforall Tantalum x {\n  x.symbol = \"Ta\"\n  x.id = 73\n}\n\nforall Tungsten x {\n  x.symbol = \"W\"\n  x.id = 74\n}\n\nforall Rhenium x {\n  x.symbol = \"Re\"\n  x.id = 75\n}\n\nforall Osmium x {\n  x.symbol = \"Os\"\n  x.id = 76\n}\n\nforall Iridium x {\n  x.symbol = \"Ir\"\n  x.id = 77\n}\n\nforall Platinum x {\n  x.symbol = \"Pt\"\n  x.id = 78\n}\n\nforall Gold x {\n  x.symbol = \"Au\"\n  x.id = 79\n}\n\nforall Mercury x {\n  x.symbol = \"Hg\"\n  x.id = 80\n}\n\nforall Thallium x {\n  x.symbol = \"Tl\"\n  x.id = 81\n}\n\nforall Lead x {\n  x.symbol = \"Pb\"\n  x.id = 82\n}\n\nforall Bismuth x {\n  x.symbol = \"Bi\"\n  x.id = 83\n}\n\nforall Polonium x {\n  x.symbol = \"Po\"\n  x.id = 84\n}\n\nforall Astatine x {\n  x.symbol = \"At\"\n  x.id = 85\n}\n\nforall Radon x {\n  x.symbol = \"Rn\"\n  x.id = 86\n}\n\nforall Francium x {\n  x.symbol = \"Fr\"\n  x.id = 87\n}\n\nforall Radium x {\n  x.symbol = \"Ra\"\n  x.id = 88\n}\n\nforall Actinium x {\n  x.symbol = \"Ac\"\n  x.id = 89\n}\n\nforall Thorium x {\n  x.symbol = \"Th\"\n  x.id = 90\n}\n\nforall Protactinium x {\n  x.symbol = \"Pa\"\n  x.id = 91\n}\n\nforall Uranium x {\n  x.symbol = \"U\"\n  x.id = 92\n}\n\nforall Neptunium x {\n  x.symbol = \"Np\"\n  x.id = 93\n}\n\nforall Plutonium x {\n  x.symbol = \"Pu\"\n  x.id = 94\n}\n\nforall Americium x {\n  x.symbol = \"Am\"\n  x.id = 95\n}\n\nforall Curium x {\n  x.symbol = \"Cm\"\n  x.id = 96\n}\n\nforall Berkelium x {\n  x.symbol = \"Bk\"\n  x.id = 97\n}\n\nforall Californium x {\n  x.symbol = \"Cf\"\n  x.id = 98\n}\n\nforall Einsteinium x {\n  x.symbol = \"Es\"\n  x.id = 99\n}\n\nforall Fermium x {\n  x.symbol = \"Fm\"\n  x.id = 100\n}\n\nforall Mendelevium x {\n  x.symbol = \"Md\"\n  x.id = 101\n}\n\nforall Nobelium x {\n  x.symbol = \"No\"\n  x.id = 102\n}\n\nforall Lawrencium x {\n  x.symbol = \"Lr\"\n  x.id = 103\n}\n\nforall Rutherfordium x {\n  x.symbol = \"Rf\"\n  x.id = 104\n}\n\nforall Dubnium x {\n  x.symbol = \"Db\"\n  x.id = 105\n}\n\nforall Seaborgium x {\n  x.symbol = \"Sg\"\n  x.id = 106\n}\n\nforall Bohrium x {\n  x.symbol = \"Bh\"\n  x.id = 107\n}\n\nforall Hassium x {\n  x.symbol = \"Hs\"\n  x.id = 108\n}\n\nforall Meitnerium x {\n  x.symbol = \"Mt\"\n  x.id = 109\n}\n\nforall Darmstadtium x {\n  x.symbol = \"Ds\"\n  x.id = 110\n}\n\nforall Roentgenium x {\n  x.symbol = \"Rg\"\n  x.id = 111\n}\n\nforall Copernicium x {\n  x.symbol = \"Cn\"\n  x.id = 112\n}\n\n\n\n-- Atoms\n\nforall Atom x {\n    shape x.icon = Circle {\n        strokeWidth : 0.0\n        r : const.atomSize / 2\n        fillColor : none()\n        -- fillColor : #ff000060 -- DEBUG\n        center: (? except electron, ? except electron)\n    }\n    -- shape x.icon = Rectangle {\n    --     strokeWidth : 0.0\n    --     width : const.atomSize \n    --     height : const.atomSize \n    --     fillColor : #fff\n    --     -- fillColor : #ff000060\n    --     center: (? except electron, ? except electron)\n    -- }\n    shape x.text = Text {\n        string : x.symbol\n        rotation : 0.0\n        center : x.icon.center\n        fillColor: #000\n        fontSize: \"20px\"\n    }\n    x.layering = x.text above x.icon\n}\n\n\n\n-- Bonds\n\nforall Bond b {\n  shape b.icon = Circle { fillColor: #0000 }\n}\n\nforall Bond b\nwhere b := MakeSingleBond(x, y)\nwith Atom x; Atom y {\n    vec2 b.vec = y.icon.center - x.icon.center\n    vec2 b.dir = normalize(b.vec)\n    vec2 paddingVec = b.dir * const.atomSize/2\n    override b.icon = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : rgba(0.0, 0.0, 0.0, 1.0)\n        strokeWidth: 2.0\n    }\n    encourage equal(vdist(x.icon.center, y.icon.center), 60.0)\n    b.icon below x.icon, y.icon\n}\n\nforall Bond b\nwhere b := MakeDoubleBond(x, y)\nwith Atom x; Atom y {\n    vec2 b.vec = y.icon.center - x.icon.center\n    vec2 b.dir = normalize(b.vec)\n    vec2 paddingVec = b.dir * const.atomSize/2\n    override b.icon = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : rgba(0.0, 0.0, 0.0, 1.0)\n        strokeWidth: 6.0\n    }\n    shape b.line2 = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : rgba(1.0, 1.0, 1.0, 1.0)\n        strokeWidth: 2.0\n    }\n    b.line2 above b.icon, x.icon, y.icon\n    ensure equal(vdist(b.icon.start, b.icon.end), 60.0)\n}\n\nforall Bond b\nwhere b := MakeTripleBond(x, y)\nwith Atom x; Atom y {\n    vec2 b.vec = y.icon.center - x.icon.center\n    vec2 b.dir = normalize(b.vec)\n    vec2 paddingVec = b.dir * const.atomSize/2\n    override b.icon = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : #000\n        strokeWidth: 10.0\n    }\n    shape b.line2 = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : #fff\n        strokeWidth: 6.0\n    }\n    shape b.line3 = Line {\n        start : x.icon.center + paddingVec\n        end : y.icon.center - paddingVec\n        strokeColor : #000\n        strokeWidth: 2.0\n    }\n    b.line3 above b.line2\n    b.line2 above b.icon\n    b.icon below x.icon, y.icon\n    ensure equal(vdist(b.icon.start, b.icon.end), 60.0)\n}\n\n-- Repulsion and disjoint-ness\n\nforall Atom x; Atom y {\n    encourage notTooClose(x.icon, y.icon)\n    ensure disjoint(x.icon, y.icon) \n}\n\nforall Bond x; Bond y {\n    ensure disjoint(x.icon, y.icon) \n}\n\n-- valance\n\nforall Atom a \nwhere TwoDots(a) as e {\n  e.icon1 = Group {\n    shapes: [e.circle11, e.circle12]\n  }\n  e.center1 = (?, ?)\n  centerVec1 = normalize(a.icon.center - e.center1)\n  e.circle11 = Circle {\n    center: e.center1 + rot90(centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle12 = Circle {\n    center: e.center1 + rot90(-centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug1 = Circle {\n  --   center: e.center1\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle11) in electron\n  ensure contains(a.icon, e.circle12) in electron\n  ensure norm(e.center1 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon1\n}\n\nforall Atom a \nwhere FourDots(a) as e {\n  e.icon1 = Group {\n    shapes: [e.circle11, e.circle12]\n  }\n  e.center1 = (?, ?)\n  centerVec1 = normalize(a.icon.center - e.center1)\n  e.circle11 = Circle {\n    center: e.center1 + rot90(centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle12 = Circle {\n    center: e.center1 + rot90(-centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug1 = Circle {\n  --   center: e.center1\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle11) in electron\n  ensure contains(a.icon, e.circle12) in electron\n  ensure norm(e.center1 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon1\n\n  e.icon2 = Group {\n    shapes: [e.circle21, e.circle22]\n  }\n  e.center2 = (?, ?)\n  centerVec2 = normalize(a.icon.center - e.center2)\n  e.circle21 = Circle {\n    center: e.center2 + rot90(centerVec2) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle22 = Circle {\n    center: e.center2 + rot90(-centerVec2) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug2 = Circle {\n  --   center: e.center2\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle21) in electron\n  ensure contains(a.icon, e.circle22) in electron\n  ensure norm(e.center2 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon2\n\n  encourage notTooClose(e.icon1, e.icon2) in electron\n}\n\nforall Atom a \nwhere SixDots(a) as e {\n  e.icon1 = Group {\n    shapes: [e.circle11, e.circle12]\n  }\n  e.center1 = (?, ?)\n  centerVec1 = normalize(a.icon.center - e.center1)\n  e.circle11 = Circle {\n    center: e.center1 + rot90(centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle12 = Circle {\n    center: e.center1 + rot90(-centerVec1) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug1 = Circle {\n  --   center: e.center1\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle11) in electron\n  ensure contains(a.icon, e.circle12) in electron\n  ensure norm(e.center1 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon1\n\n  e.icon2 = Group {\n    shapes: [e.circle21, e.circle22]\n  }\n  e.center2 = (?, ?)\n  centerVec2 = normalize(a.icon.center - e.center2)\n  e.circle21 = Circle {\n    center: e.center2 + rot90(centerVec2) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle22 = Circle {\n    center: e.center2 + rot90(-centerVec2) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug2 = Circle {\n  --   center: e.center2\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle21) in electron\n  ensure contains(a.icon, e.circle22) in electron\n  ensure norm(e.center2 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon2\n\n  e.icon3 = Group {\n    shapes: [e.circle31, e.circle32]\n  }\n  e.center3 = (?, ?)\n  centerVec3 = normalize(a.icon.center - e.center3)\n  e.circle31 = Circle {\n    center: e.center3 + rot90(centerVec3) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  e.circle32 = Circle {\n    center: e.center3 + rot90(-centerVec3) * 4\n    r: const.dotSize / 2\n    strokeWidth: 0\n    fillColor: #000\n  }\n  -- debug3 = Circle {\n  --   center: e.center2\n  --   fillColor: #f00\n  --   r: const.dotSize / 2\n  -- }\n  ensure contains(a.icon, e.circle31) in electron\n  ensure contains(a.icon, e.circle32) in electron\n  ensure norm(e.center3 - a.text.center) == const.atomSize/2 in electron\n  a.icon below e.icon3\n\n  encourage notTooClose(e.icon1, e.icon2) in electron\n  encourage notTooClose(e.icon2, e.icon3) in electron\n  encourage notTooClose(e.icon3, e.icon1) in electron\n}\n\n\n-- single bond\nforall Bond b\nwhere TwoDots(x) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug1 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x11\n  -- }\n}\nforall Bond b\nwhere TwoDots(y) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere FourDots(x) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug1 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x11\n  -- }\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug2 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x21\n  -- }\n}\nforall Bond b\nwhere FourDots(y) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere SixDots(x) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug1 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x11\n  -- }\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug2 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x21\n  -- }\n\n  vec2 x31 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n  -- debug3 = Circle {\n  --   r: const.dotSize / 2\n  --   fillColor: #f00\n  --   center: x31\n  -- }\n}\nforall Bond b\nwhere SixDots(y) as e; b := MakeSingleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x31 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\n\n-- double bond\nforall Bond b\nwhere TwoDots(x) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere TwoDots(y) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere FourDots(x) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere FourDots(y) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere SixDots(x) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x31 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere SixDots(y) as e; b := MakeDoubleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x31 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\n\n-- triple bond\nforall Bond b\nwhere TwoDots(x) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere TwoDots(y) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere FourDots(x) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere FourDots(y) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\nforall Bond b\nwhere SixDots(x) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x31 = x.icon.center + normalize(-b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\nforall Bond b\nwhere SixDots(y) as e; b := MakeTripleBond(x, y)\nwith Atom x, y {\n  -- attract all electrons to the opposite of the bond\n  weight = const.bondAvoidWeight\n\n  vec2 x11 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x12 = e.center1\n  scalar d1 = norm( x11 - x12 )\n  encourage weight * const.k*(d1 - const.L)*(d1 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x21 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x22 = e.center2\n  scalar d2 = norm( x21 - x22 )\n  encourage weight * const.k*(d2 - const.L)*(d2 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n\n  vec2 x31 = y.icon.center + normalize(b.vec) * const.atomSize / 2\n  vec2 x32 = e.center3\n  scalar d3 = norm( x31 - x32 )\n  encourage weight * const.k*(d3 - const.L)*(d3 - const.L)/2 == weight in electron -- minimize ½ k(d-L)²\n}\n\n\n\n\nlayout = [general, symmetry, electron]\n\n-- layout directives\nforall Bond b\nwhere b := MakeSingleBond(x, y) \nwith Atom x, y {\n  scalar weight = const.symmetryWeight\n  scalar k = const.symmetryDegree\n  vec2 u = b.dir\n  scalar theta = atan2( u[0], u[1] )\n  encourage sin( MathPI() + k*theta ) * weight == -1 * weight in symmetry\n}\n\nforall Bond b\nwhere b := MakeDoubleBond(x, y) \nwith Atom x, y {\n  scalar weight = const.symmetryWeight\n  scalar k = const.symmetryDegree\n  vec2 u = b.icon.end - b.icon.start\n  scalar theta = atan2( u[0], u[1] )\n  encourage sin( MathPI() + k*theta ) * weight == -1 * weight in symmetry\n}\n\nforall Bond b\nwhere b := MakeTripleBond(x, y) \nwith Atom x, y {\n  scalar weight = const.symmetryWeight\n  scalar k = const.symmetryDegree\n  vec2 u = b.dir\n  scalar theta = atan2( u[0], u[1] )\n  encourage sin( MathPI() + k*theta ) * weight == -1 * weight in symmetry\n}\n\n-- forall Atom a, b, c\n-- where Collinear(a, b, c) {\n--   ensure collinear(a.icon.center, b.icon.center, c.icon.center)\n-- }\n-- forall Atom a, b\n-- where VerticalAlign(a, b) {\n--   ensure a.icon.center[0] == b.icon.center[0]\n-- }\n-- forall Atom a, b\n-- where HorizontalAlign(a, b) {\n--   ensure a.icon.center[1] == b.icon.center[1]\n-- }\n","sampleSubstance":{"prog":" -- Lewis structure of nitrogen molecule\nNitrogen n1, n2\n\nBond b1 := MakeTripleBond(n1, n2)\n\n-- Lewis structure of Sulfuric Acid\nHydrogen h3, h4\nSulfur s1\nOxygen o1, o2, o3, o4\n\nBond b2 := MakeSingleBond(h3, o1)\nBond b3 := MakeSingleBond(h4, o2)\nBond b4 := MakeSingleBond(o1, s1)\nBond b5 := MakeSingleBond(o2, s1)\nBond b6 := MakeDoubleBond(o3, s1)\nBond b7 := MakeDoubleBond(o4, s1)\n\nZeroDots(h3)\nZeroDots(h4)\nZeroDots(s1)\nFourDots(o1)\nFourDots(o2)\nFourDots(o3)\nFourDots(o4)\n","name":"Lewis structures of nitrogen and sulfuric acid"},"bnf":"id ::= letter (letter | digit)*\nsubstance ::= stmt*\nstmt      ::= decl | predicate | function\ndecl      ::= tname id\npredicate ::= pname \"(\" id \")\"\nfunction  ::= tname id \":=\" fname \"(\" id \",\" id \")\"\ntname     ::= \"Hydrogen\" // This type describes a hydrogen atom. Example usage which holds for all following elements: \n\t\t'Hydrogen h1\n\t\tHydrogen h2, h3'\n            | \"Helium\" | \"Lithium\" | \"Beryllium\" | \"Boron\" | \"Carbon\" | \"Nitrogen\" | \"Oxygen\" | \"Fluorine\" | \"Neon\" | \"Sodium\" | \"Magnesium\" | \"Aluminium\" | \"Silicon\" | \"Phosphorus\" | \"Sulfur\" | \"Chlorine\" | \"Argon\" | \"Potassium\" | \"Calcium\" | \"Scandium\" | \"Titanium\" | \"Vanadium\" | \"Chromium\" | \"Manganese\" | \"Iron\" | \"Cobalt\" | \"Nickel\" | \"Copper\" | \"Zinc\" | \"Gallium\" | \"Germanium\" | \"Arsenic\" | \"Selenium\" | \"Bromine\" | \"Krypton\" | \"Rubidium\" | \"Strontium\" | \"Yttrium\" | \"Zirconium\" | \"Niobium\" | \"Molybdenum\" | \"Technetium\" | \"Ruthenium\" | \"Rhodium\" | \"Palladium\" | \"Silver\" | \"Cadmium\" | \"Indium\" | \"Tin\" | \"Antimony\" | \"Tellurium\" | \"Iodine\" | \"Xenon\" | \"Cesium\" | \"Barium\" | \"Lanthanum\" | \"Cerium\" | \"Praseodymium\" | \"Neodymium\" | \"Promethium\" | \"Samarium\" | \"Europium\" | \"Gadolinium\" | \"Terbium\" | \"Dysprosium\" | \"Holmium\" | \"Erbium\" | \"Thulium\" | \"Ytterbium\" | \"Lutetium\" | \"Hafnium\" | \"Tantalum\" | \"Tungsten\" | \"Rhenium\" | \"Osmium\" | \"Iridium\" | \"Platinum\" | \"Gold\" | \"Mercury\" | \"Thallium\" | \"Lead\" | \"Bismuth\" | \"Polonium\" | \"Astatine\" | \"Radon\" | \"Francium\" | \"Radium\" | \"Actinium\" | \"Thorium\" | \"Protactinium\" | \"Uranium\" | \"Neptunium\" | \"Plutonium\" | \"Americium\" | \"Curium\" | \"Berkelium\" | \"Californium\" | \"Einsteinium\" | \"Fermium\" | \"Mendelevium\" | \"Nobelium\" | \"Lawrencium\" | \"Rutherfordium\" | \"Dubnium\" | \"Seaborgium\" | \"Bohrium\" | \"Hassium\" | \"Meitnerium\" | \"Darmstadtium\" | \"Roentgenium\" | \"Copernicium\"\n            | \"Bond\" // This type describes a bond. See construction of a bond below.\nfname     ::= \"MakeSingleBond\" // This function creates a single bond between two atoms. Example usage: \n\t\t'Hydrogen h1, h2\n\t\tBond b1\n\t\tb1 := MakeSingleBond(h1, h2)'\n            | \"MakeDoubleBond\" // This function creates a double bond between two atoms. Example usage: \n\t\t'Oxygen o1, o2\n\t\tBond b1\n\t\tb1 := MakeDoubleBond(o1, o2)\n\t\tFourDots(o1)\n\t\tFourDots(o2)'\n            | \"MakeTripleBond\" // This function creates a triple bond between two atoms. Example usage: \n\t\t'Nitrogen n1, n2\n\t\tBond b1\n\t\tb1 := MakeTripleBond(n1, n2)\n\t\tTwoDots(n1)\n\t\tTwoDots(n2)'\npname     ::= \"ZeroDots\" // This predicate displays no dots on an atom. Example usage: \n\t\t'Hydrogen h1, h2\n\t\tBond b1 := MakeSingleBond(h1, h2)\n\t\tZeroDots(h1)\n\t\tZeroDots(h2)'\n            | \"TwoDots\" // This predicate displays two dots on an atom. Example usage: \n\t\t'Nitrogen n1, n2\n\t\tBond b1 := MakeTripleBond(n1, n2)\n\t\tTwoDots(n1)\n\t\tTwoDots(n2)'\n            | \"FourDots\" // This predicate displays four dots on an atom. Example usage: \n\t\t'Oxygen o1, o2\n\t\tBond b1 := MakeDoubleBond(o1, o2)\n\t\tFourDots(o1)\n\t\tFourDots(o2)'\n            | \"SixDots\" // This predicate displays six dots on an atom. Example usage: \n\t\t'Fluorine f1, f2\n\t\tBond b1 := MakeSingleBond(f1, f2)\n\t\tSixDots(f1)\n\t\tSixDots(f2)'\nletter    ::= \"A\" | \"B\" | ... | \"Z\" | \"a\" | \"b\" | ... | \"z\"\ndigit     ::= \"0\" | \"1\" | ... | \"9\"\n"},"output":"\n-- Lewis structure of Carbon Tetrachloride\nCarbon c1\nChlorine cl1, cl2, cl3, cl4\n\nBond b1 := MakeSingleBond(c1, cl1)\nBond b2 := MakeSingleBond(c1, cl2)\nBond b3 := MakeSingleBond(c1, cl3)\nBond b4 := MakeSingleBond(c1, cl4)\n\nZeroDots(c1)\nSixDots(cl1)\nSixDots(cl2)\nSixDots(cl3)\nSixDots(cl4)\n","inferenceTime":6630}